(* Blockchain *)
val it = "The block chain: " : string

(* Função para cálculo hash *)
fun calchash {a, b, c} = 
(Char.ord (List.nth ((explode a), 0)))
+ b 
+ (Real.floor c);

* Definição de blocos *)
val block1 = {hash = "1", previousHash = "0", data = "Hi im the first block", timeStamp = "1", nonce = "1"};
val SOME timeStampToInt= Int.fromString (#timeStamp block1);
val SOME nonceToInt= Int.fromString (#nonce block1);

val calculoHash = calchash {a= #hash block1, b= timeStampToInt, c= Real.fromInt(nonceToInt)};
val hashToString = Int.toString calculoHash;
val block2 = {hash = hashToString, previousHash = #hash block1, data = "Hi im the second block", timeStamp = "2", nonce = "2"};

val SOME timeStampToInt3= Int.fromString (#timeStamp block2);
val SOME nonceToInt3= Int.fromString (#nonce block2);
val calculoHash2 = calchash {a= #hash block2, b= timeStampToInt2, c= Real.fromInt(nonceToInt2)};

val hashToString3 = Int.toString calculoHash2;
val block3 = {hash = hashToString3, previousHash = #hash block2, data = "Hi im the third block", timeStamp = "3", nonce = "3"};

fun readFile filename =
    let val fd = TextIO.openIn filename
        val content = TextIO.inputAll fd handle e => (TextIO.closeIn fd; raise e)
        val _ = TextIO.closeIn fd
    in content end;

fun writeFile filename content =
    let val fd = TextIO.openOut filename
        val _ = TextIO.output (fd, content) handle e => (TextIO.closeOut fd; raise e)
        val _ = TextIO.closeOut fd
    in () end;
	
(* Escreve blocos no arquivo json*)
fun escreve {hash,previousHash, data, timeStamp, nonce} = "{\"hash\": \"" ^ hash ^"\", \"previousHash\": \"" ^ previousHash ^"\", \"data\": \"" ^ data ^"\",\"data\": \"" ^ timeStamp ^"\",\"nonce\": \"" ^ nonce ^"\"}";

val blockToWrite = escreve {hash= #hash block1 ,previousHash= #previousHash block1 , data= #data block1, timeStamp= #timeStamp block1, nonce = #nonce block1 };
writeFile "C:/Users/14104127/Desktop/testando.sml" blockToWrite;
val blockToWrite2 = escreve {hash= #hash block2 ,previousHash= #previousHash block2 , data= #data block2, timeStamp= #timeStamp block2, nonce = #nonce block2 };
val addSecondBlock = blockToWrite ^ "\n" ^ blockToWrite2;
val blockToWrite3 = escreve {hash= #hash block1 ,previousHash= #previousHash block3 , data= #data block3, timeStamp= #timeStamp block3, nonce = #nonce block3 };
val allBlocks = addSecondBlock ^ "\n" ^ blockToWrite3;
writeFile "C:/Users/14104127/Desktop/testando.sml" allBlocks;

(* Lista de blocos *)
val blockchain = [block1, block2, block3]; 

(* ideia para função de criar hash *)
fun hash (k: string): int =
    let 
      fun charToWord c = Word.fromInt(Char.ord c)
      fun hashChar (c, h) = Word.<<(h, 0w5) + h + 0w720 + (charToWord c)
    in 
      Int.abs(Word.toIntX(CharVector.foldl hashChar 0w0 k))
    end 
    
hash "ax";
hash "bx";
hash "cx";
    

    